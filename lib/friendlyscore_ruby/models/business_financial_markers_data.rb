=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module FriendlyscoreClient
  class BusinessFinancialMarkersData
    attr_accessor :bank_charges

    # New debt indicator
    attr_accessor :new_debt_indicator

    attr_accessor :credit_repayments

    # Currency code (compatible with ISO 4217)
    attr_accessor :currency

    attr_accessor :returned_direct_debits

    # Negative balance ratio
    attr_accessor :negative_balance_ratio

    # New debt indicator
    attr_accessor :debt_management_indicator

    attr_accessor :debit_bank_transfer

    attr_accessor :summary_averages

    attr_accessor :expense_proportion

    # High cost short term credit indicator
    attr_accessor :high_cost_short_term_credit_indicator

    # Profitability ratio
    attr_accessor :profitability_ratio

    # Recent account indicator
    attr_accessor :recent_account_indicator

    attr_accessor :income_proportion

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bank_charges' => :'bank_charges',
        :'new_debt_indicator' => :'new_debt_indicator',
        :'credit_repayments' => :'credit_repayments',
        :'currency' => :'currency',
        :'returned_direct_debits' => :'returned_direct_debits',
        :'negative_balance_ratio' => :'negative_balance_ratio',
        :'debt_management_indicator' => :'debt_management_indicator',
        :'debit_bank_transfer' => :'debit_bank_transfer',
        :'summary_averages' => :'summary_averages',
        :'expense_proportion' => :'expense_proportion',
        :'high_cost_short_term_credit_indicator' => :'high_cost_short_term_credit_indicator',
        :'profitability_ratio' => :'profitability_ratio',
        :'recent_account_indicator' => :'recent_account_indicator',
        :'income_proportion' => :'income_proportion'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'bank_charges' => :'HistoricalCummulativeStat',
        :'new_debt_indicator' => :'BOOLEAN',
        :'credit_repayments' => :'AmountStat',
        :'currency' => :'String',
        :'returned_direct_debits' => :'HistoricalCummulativeStat',
        :'negative_balance_ratio' => :'Float',
        :'debt_management_indicator' => :'BOOLEAN',
        :'debit_bank_transfer' => :'AmountStat',
        :'summary_averages' => :'FinancialMarkersDataSummaryAverages',
        :'expense_proportion' => :'ExpenseProportion',
        :'high_cost_short_term_credit_indicator' => :'BOOLEAN',
        :'profitability_ratio' => :'Float',
        :'recent_account_indicator' => :'BOOLEAN',
        :'income_proportion' => :'IncomeProportion'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'bank_charges')
        self.bank_charges = attributes[:'bank_charges']
      end

      if attributes.has_key?(:'new_debt_indicator')
        self.new_debt_indicator = attributes[:'new_debt_indicator']
      end

      if attributes.has_key?(:'credit_repayments')
        self.credit_repayments = attributes[:'credit_repayments']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'returned_direct_debits')
        self.returned_direct_debits = attributes[:'returned_direct_debits']
      end

      if attributes.has_key?(:'negative_balance_ratio')
        self.negative_balance_ratio = attributes[:'negative_balance_ratio']
      end

      if attributes.has_key?(:'debt_management_indicator')
        self.debt_management_indicator = attributes[:'debt_management_indicator']
      end

      if attributes.has_key?(:'debit_bank_transfer')
        self.debit_bank_transfer = attributes[:'debit_bank_transfer']
      end

      if attributes.has_key?(:'summary_averages')
        self.summary_averages = attributes[:'summary_averages']
      end

      if attributes.has_key?(:'expense_proportion')
        self.expense_proportion = attributes[:'expense_proportion']
      end

      if attributes.has_key?(:'high_cost_short_term_credit_indicator')
        self.high_cost_short_term_credit_indicator = attributes[:'high_cost_short_term_credit_indicator']
      end

      if attributes.has_key?(:'profitability_ratio')
        self.profitability_ratio = attributes[:'profitability_ratio']
      end

      if attributes.has_key?(:'recent_account_indicator')
        self.recent_account_indicator = attributes[:'recent_account_indicator']
      end

      if attributes.has_key?(:'income_proportion')
        self.income_proportion = attributes[:'income_proportion']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bank_charges == o.bank_charges &&
          new_debt_indicator == o.new_debt_indicator &&
          credit_repayments == o.credit_repayments &&
          currency == o.currency &&
          returned_direct_debits == o.returned_direct_debits &&
          negative_balance_ratio == o.negative_balance_ratio &&
          debt_management_indicator == o.debt_management_indicator &&
          debit_bank_transfer == o.debit_bank_transfer &&
          summary_averages == o.summary_averages &&
          expense_proportion == o.expense_proportion &&
          high_cost_short_term_credit_indicator == o.high_cost_short_term_credit_indicator &&
          profitability_ratio == o.profitability_ratio &&
          recent_account_indicator == o.recent_account_indicator &&
          income_proportion == o.income_proportion
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bank_charges, new_debt_indicator, credit_repayments, currency, returned_direct_debits, negative_balance_ratio, debt_management_indicator, debit_bank_transfer, summary_averages, expense_proportion, high_cost_short_term_credit_indicator, profitability_ratio, recent_account_indicator, income_proportion].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FriendlyscoreClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
