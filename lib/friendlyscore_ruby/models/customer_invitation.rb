=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module FriendlyscoreClient
  class CustomerInvitation
    attr_accessor :id

    attr_accessor :customer_type

    attr_accessor :last_name

    attr_accessor :first_name

    attr_accessor :company_name

    attr_accessor :email

    attr_accessor :phone

    attr_accessor :reference

    attr_accessor :send_email

    attr_accessor :created_at

    attr_accessor :revoked_at

    attr_accessor :used_at

    attr_accessor :expires_in

    attr_accessor :url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'customer_type' => :'customer_type',
        :'last_name' => :'last_name',
        :'first_name' => :'first_name',
        :'company_name' => :'company_name',
        :'email' => :'email',
        :'phone' => :'phone',
        :'reference' => :'reference',
        :'send_email' => :'send_email',
        :'created_at' => :'created_at',
        :'revoked_at' => :'revoked_at',
        :'used_at' => :'used_at',
        :'expires_in' => :'expires_in',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'customer_type' => :'String',
        :'last_name' => :'String',
        :'first_name' => :'String',
        :'company_name' => :'String',
        :'email' => :'String',
        :'phone' => :'String',
        :'reference' => :'String',
        :'send_email' => :'BOOLEAN',
        :'created_at' => :'DateTime',
        :'revoked_at' => :'DateTime',
        :'used_at' => :'DateTime',
        :'expires_in' => :'Integer',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'send_email')
        self.send_email = attributes[:'send_email']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'revoked_at')
        self.revoked_at = attributes[:'revoked_at']
      end

      if attributes.has_key?(:'used_at')
        self.used_at = attributes[:'used_at']
      end

      if attributes.has_key?(:'expires_in')
        self.expires_in = attributes[:'expires_in']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @customer_type.nil?
        invalid_properties.push('invalid value for "customer_type", customer_type cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @reference.nil?
        invalid_properties.push('invalid value for "reference", reference cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @customer_type.nil?
      customer_type_validator = EnumAttributeValidator.new('String', ['Individual', 'Business'])
      return false unless customer_type_validator.valid?(@customer_type)
      return false if @email.nil?
      return false if @reference.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_type Object to be assigned
    def customer_type=(customer_type)
      validator = EnumAttributeValidator.new('String', ['Individual', 'Business'])
      unless validator.valid?(customer_type)
        fail ArgumentError, 'invalid value for "customer_type", must be one of #{validator.allowable_values}.'
      end
      @customer_type = customer_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          customer_type == o.customer_type &&
          last_name == o.last_name &&
          first_name == o.first_name &&
          company_name == o.company_name &&
          email == o.email &&
          phone == o.phone &&
          reference == o.reference &&
          send_email == o.send_email &&
          created_at == o.created_at &&
          revoked_at == o.revoked_at &&
          used_at == o.used_at &&
          expires_in == o.expires_in &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, customer_type, last_name, first_name, company_name, email, phone, reference, send_email, created_at, revoked_at, used_at, expires_in, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FriendlyscoreClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
