=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module FriendlyscoreClient
  class UtilApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the current status of a certain data processing request.
    # @param customer_id Customer ID
    # @param dtn_slug Data Processing Request slug
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [DtnDataProcessingSummary]
    def public_version_customers_customer_id_data_processing_statuses_dtn_slug_get(customer_id, dtn_slug, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_data_processing_statuses_dtn_slug_get_with_http_info(customer_id, dtn_slug, version, opts)
      data
    end

    # Get the current status of a certain data processing request.
    # @param customer_id Customer ID
    # @param dtn_slug Data Processing Request slug
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DtnDataProcessingSummary, Fixnum, Hash)>] DtnDataProcessingSummary data, response status code and response headers
    def public_version_customers_customer_id_data_processing_statuses_dtn_slug_get_with_http_info(customer_id, dtn_slug, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilApi.public_version_customers_customer_id_data_processing_statuses_dtn_slug_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UtilApi.public_version_customers_customer_id_data_processing_statuses_dtn_slug_get"
      end
      # verify the required parameter 'dtn_slug' is set
      if @api_client.config.client_side_validation && dtn_slug.nil?
        fail ArgumentError, "Missing the required parameter 'dtn_slug' when calling UtilApi.public_version_customers_customer_id_data_processing_statuses_dtn_slug_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling UtilApi.public_version_customers_customer_id_data_processing_statuses_dtn_slug_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/data_processing_statuses/{dtn_slug}'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'dtn_slug' + '}', dtn_slug.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DtnDataProcessingSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilApi#public_version_customers_customer_id_data_processing_statuses_dtn_slug_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current status of a all data processing requests for current user.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [DtnDataProcessingSummaryCollection]
    def public_version_customers_customer_id_data_processing_statuses_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_data_processing_statuses_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get the current status of a all data processing requests for current user.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DtnDataProcessingSummaryCollection, Fixnum, Hash)>] DtnDataProcessingSummaryCollection data, response status code and response headers
    def public_version_customers_customer_id_data_processing_statuses_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilApi.public_version_customers_customer_id_data_processing_statuses_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UtilApi.public_version_customers_customer_id_data_processing_statuses_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling UtilApi.public_version_customers_customer_id_data_processing_statuses_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/data_processing_statuses'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DtnDataProcessingSummaryCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilApi#public_version_customers_customer_id_data_processing_statuses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current readiness status for all reports for current user.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [ReportReadinessStatusCollection]
    def public_version_customers_customer_id_report_readiness_statuses_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_report_readiness_statuses_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get the current readiness status for all reports for current user.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportReadinessStatusCollection, Fixnum, Hash)>] ReportReadinessStatusCollection data, response status code and response headers
    def public_version_customers_customer_id_report_readiness_statuses_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilApi.public_version_customers_customer_id_report_readiness_statuses_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UtilApi.public_version_customers_customer_id_report_readiness_statuses_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling UtilApi.public_version_customers_customer_id_report_readiness_statuses_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/report_readiness_statuses'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportReadinessStatusCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilApi#public_version_customers_customer_id_report_readiness_statuses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current readiness status for a certain report.
    # @param customer_id Customer ID
    # @param report_name Name of the report (e.g. &#x60;insights&#x60; or &#x60;forecast&#x60;)
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [ReportReadinessStatus]
    def public_version_customers_customer_id_report_readiness_statuses_report_name_get(customer_id, report_name, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_report_readiness_statuses_report_name_get_with_http_info(customer_id, report_name, version, opts)
      data
    end

    # Get the current readiness status for a certain report.
    # @param customer_id Customer ID
    # @param report_name Name of the report (e.g. &#x60;insights&#x60; or &#x60;forecast&#x60;)
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportReadinessStatus, Fixnum, Hash)>] ReportReadinessStatus data, response status code and response headers
    def public_version_customers_customer_id_report_readiness_statuses_report_name_get_with_http_info(customer_id, report_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilApi.public_version_customers_customer_id_report_readiness_statuses_report_name_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UtilApi.public_version_customers_customer_id_report_readiness_statuses_report_name_get"
      end
      # verify the required parameter 'report_name' is set
      if @api_client.config.client_side_validation && report_name.nil?
        fail ArgumentError, "Missing the required parameter 'report_name' when calling UtilApi.public_version_customers_customer_id_report_readiness_statuses_report_name_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling UtilApi.public_version_customers_customer_id_report_readiness_statuses_report_name_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/report_readiness_statuses/{report_name}'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'report_name' + '}', report_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportReadinessStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilApi#public_version_customers_customer_id_report_readiness_statuses_report_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
