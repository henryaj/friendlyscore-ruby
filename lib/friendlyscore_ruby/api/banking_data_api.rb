=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module FriendlyscoreClient
  class BankingDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the available transaction categories
    # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<CategoryMetadata>]
    def public_version_account_types_account_type_transaction_categories_get(account_type, version, opts = {})
      data, _status_code, _headers = public_version_account_types_account_type_transaction_categories_get_with_http_info(account_type, version, opts)
      data
    end

    # Get the available transaction categories
    # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CategoryMetadata>, Fixnum, Hash)>] Array<CategoryMetadata> data, response status code and response headers
    def public_version_account_types_account_type_transaction_categories_get_with_http_info(account_type, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_account_types_account_type_transaction_categories_get ...'
      end
      # verify the required parameter 'account_type' is set
      if @api_client.config.client_side_validation && account_type.nil?
        fail ArgumentError, "Missing the required parameter 'account_type' when calling BankingDataApi.public_version_account_types_account_type_transaction_categories_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_account_types_account_type_transaction_categories_get"
      end
      # resource path
      local_var_path = '/public/{version}/account_types/{account_type}/transaction_categories'.sub('{' + 'account_type' + '}', account_type.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CategoryMetadata>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_account_types_account_type_transaction_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get available banks.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [BankCollection]
    def public_version_banks_get(version, opts = {})
      data, _status_code, _headers = public_version_banks_get_with_http_info(version, opts)
      data
    end

    # Get available banks.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankCollection, Fixnum, Hash)>] BankCollection data, response status code and response headers
    def public_version_banks_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_banks_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_banks_get"
      end
      # resource path
      local_var_path = '/public/{version}/banks'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_banks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bank account list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [AccountCollection]
    def public_version_customers_customer_id_accounts_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_accounts_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get bank account list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountCollection, Fixnum, Hash)>] AccountCollection data, response status code and response headers
    def public_version_customers_customer_id_accounts_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_accounts_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_accounts_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_accounts_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/accounts'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bank balance list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [BalanceCollection]
    def public_version_customers_customer_id_balances_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_balances_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get bank balance list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceCollection, Fixnum, Hash)>] BalanceCollection data, response status code and response headers
    def public_version_customers_customer_id_balances_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_balances_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_balances_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_balances_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/balances'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_balances_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current user consent for given bank
    # @param customer_id Customer ID
    # @param consent_type Identifier of the consent type. Currently only &#x60;&#39;account&#39;&#x60; is used.
    # @param bank_slug Identifier of the bank. Bank slug
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [ConsentData]
    def public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get(customer_id, consent_type, bank_slug, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get_with_http_info(customer_id, consent_type, bank_slug, version, opts)
      data
    end

    # Get the current user consent for given bank
    # @param customer_id Customer ID
    # @param consent_type Identifier of the consent type. Currently only &#x60;&#39;account&#39;&#x60; is used.
    # @param bank_slug Identifier of the bank. Bank slug
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentData, Fixnum, Hash)>] ConsentData data, response status code and response headers
    def public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get_with_http_info(customer_id, consent_type, bank_slug, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get"
      end
      # verify the required parameter 'consent_type' is set
      if @api_client.config.client_side_validation && consent_type.nil?
        fail ArgumentError, "Missing the required parameter 'consent_type' when calling BankingDataApi.public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get"
      end
      # verify the required parameter 'bank_slug' is set
      if @api_client.config.client_side_validation && bank_slug.nil?
        fail ArgumentError, "Missing the required parameter 'bank_slug' when calling BankingDataApi.public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/bank/{bank_slug}/consent/{consent_type}'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'consent_type' + '}', consent_type.to_s).sub('{' + 'bank_slug' + '}', bank_slug.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsentData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get customer's connected banks with embedded consent objects.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [BankWithConsentsCollection]
    def public_version_customers_customer_id_banks_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_banks_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get customer&#39;s connected banks with embedded consent objects.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankWithConsentsCollection, Fixnum, Hash)>] BankWithConsentsCollection data, response status code and response headers
    def public_version_customers_customer_id_banks_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_banks_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_banks_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_banks_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/banks'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankWithConsentsCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_banks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update given set of transactions with a new category.
    # @param customer_id Customer ID
    # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionsCategoryPatch] :category_patch Object describing which transactions should be patched and what category should be set.
    # @return [nil]
    def public_version_customers_customer_id_transaction_categorisation_account_type_patch(customer_id, account_type, version, opts = {})
      public_version_customers_customer_id_transaction_categorisation_account_type_patch_with_http_info(customer_id, account_type, version, opts)
      nil
    end

    # Update given set of transactions with a new category.
    # @param customer_id Customer ID
    # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionsCategoryPatch] :category_patch Object describing which transactions should be patched and what category should be set.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def public_version_customers_customer_id_transaction_categorisation_account_type_patch_with_http_info(customer_id, account_type, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_transaction_categorisation_account_type_patch ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_transaction_categorisation_account_type_patch"
      end
      # verify the required parameter 'account_type' is set
      if @api_client.config.client_side_validation && account_type.nil?
        fail ArgumentError, "Missing the required parameter 'account_type' when calling BankingDataApi.public_version_customers_customer_id_transaction_categorisation_account_type_patch"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_transaction_categorisation_account_type_patch"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/transaction_categorisation/{account_type}'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'account_type' + '}', account_type.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'category_patch'])
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_transaction_categorisation_account_type_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get bank transaction list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number (1 by default)
    # @option opts [Integer] :max_per_page Item count on one page (1000 by default)
    # @option opts [String] :category_id Category ID to filter by
    # @option opts [String] :account_number Account number to filter by
    # @option opts [String] :account_type OpenBanking Account type (&#x60;&#39;Personal&#39;&#x60; or &#x60;&#39;Business&#39;&#x60;)
    # @option opts [String] :bank_slug Bank slug to filter by
    # @option opts [Integer] :booking_date_time_from Min value (inclusive) for booking date time filter (UNIX timestamp in seconds)
    # @option opts [Integer] :booking_date_time_to Max value (inclusive) for booking date time filter (UNIX timestamp in seconds)
    # @option opts [String] :currency Currency to filter by (ISO 4217 format)
    # @return [TransactionCollection]
    def public_version_customers_customer_id_transactions_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_transactions_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get bank transaction list for a given customer.
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number (1 by default)
    # @option opts [Integer] :max_per_page Item count on one page (1000 by default)
    # @option opts [String] :category_id Category ID to filter by
    # @option opts [String] :account_number Account number to filter by
    # @option opts [String] :account_type OpenBanking Account type (&#x60;&#39;Personal&#39;&#x60; or &#x60;&#39;Business&#39;&#x60;)
    # @option opts [String] :bank_slug Bank slug to filter by
    # @option opts [Integer] :booking_date_time_from Min value (inclusive) for booking date time filter (UNIX timestamp in seconds)
    # @option opts [Integer] :booking_date_time_to Max value (inclusive) for booking date time filter (UNIX timestamp in seconds)
    # @option opts [String] :currency Currency to filter by (ISO 4217 format)
    # @return [Array<(TransactionCollection, Fixnum, Hash)>] TransactionCollection data, response status code and response headers
    def public_version_customers_customer_id_transactions_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankingDataApi.public_version_customers_customer_id_transactions_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankingDataApi.public_version_customers_customer_id_transactions_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling BankingDataApi.public_version_customers_customer_id_transactions_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/transactions'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'max_per_page'] = opts[:'max_per_page'] if !opts[:'max_per_page'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'account_number'] = opts[:'account_number'] if !opts[:'account_number'].nil?
      query_params[:'account_type'] = opts[:'account_type'] if !opts[:'account_type'].nil?
      query_params[:'bank_slug'] = opts[:'bank_slug'] if !opts[:'bank_slug'].nil?
      query_params[:'booking_date_time_from'] = opts[:'booking_date_time_from'] if !opts[:'booking_date_time_from'].nil?
      query_params[:'booking_date_time_to'] = opts[:'booking_date_time_to'] if !opts[:'booking_date_time_to'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankingDataApi#public_version_customers_customer_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
