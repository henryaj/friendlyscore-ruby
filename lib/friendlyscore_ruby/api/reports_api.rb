=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module FriendlyscoreClient
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the the forecasts for customer
    # @param customer_id Customer ID
    # @param forecast_id ID of the forecast. Should be &#x60;current_personal&#x60; or &#x60;current_business&#x60;. &#x60;current&#x60; is now deprecated (works as &#x60;current_personal&#x60;).
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Forecast]
    def public_version_customers_customer_id_forecasts_forecast_id_get(customer_id, forecast_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_forecasts_forecast_id_get_with_http_info(customer_id, forecast_id, version, opts)
      data
    end

    # Get the the forecasts for customer
    # @param customer_id Customer ID
    # @param forecast_id ID of the forecast. Should be &#x60;current_personal&#x60; or &#x60;current_business&#x60;. &#x60;current&#x60; is now deprecated (works as &#x60;current_personal&#x60;).
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Forecast, Fixnum, Hash)>] Forecast data, response status code and response headers
    def public_version_customers_customer_id_forecasts_forecast_id_get_with_http_info(customer_id, forecast_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.public_version_customers_customer_id_forecasts_forecast_id_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ReportsApi.public_version_customers_customer_id_forecasts_forecast_id_get"
      end
      # verify the required parameter 'forecast_id' is set
      if @api_client.config.client_side_validation && forecast_id.nil?
        fail ArgumentError, "Missing the required parameter 'forecast_id' when calling ReportsApi.public_version_customers_customer_id_forecasts_forecast_id_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ReportsApi.public_version_customers_customer_id_forecasts_forecast_id_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/forecasts/{forecast_id}'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'forecast_id' + '}', forecast_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Forecast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#public_version_customers_customer_id_forecasts_forecast_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the insights for customer's business accounts
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [BusinessInsights]
    def public_version_customers_customer_id_insights_current_business_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_insights_current_business_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get the insights for customer&#39;s business accounts
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BusinessInsights, Fixnum, Hash)>] BusinessInsights data, response status code and response headers
    def public_version_customers_customer_id_insights_current_business_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.public_version_customers_customer_id_insights_current_business_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ReportsApi.public_version_customers_customer_id_insights_current_business_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ReportsApi.public_version_customers_customer_id_insights_current_business_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/insights/current_business'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BusinessInsights')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#public_version_customers_customer_id_insights_current_business_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the insights for customer's personal accounts
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Insights]
    def public_version_customers_customer_id_insights_current_personal_get(customer_id, version, opts = {})
      data, _status_code, _headers = public_version_customers_customer_id_insights_current_personal_get_with_http_info(customer_id, version, opts)
      data
    end

    # Get the insights for customer&#39;s personal accounts
    # @param customer_id Customer ID
    # @param version 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Insights, Fixnum, Hash)>] Insights data, response status code and response headers
    def public_version_customers_customer_id_insights_current_personal_get_with_http_info(customer_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.public_version_customers_customer_id_insights_current_personal_get ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ReportsApi.public_version_customers_customer_id_insights_current_personal_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ReportsApi.public_version_customers_customer_id_insights_current_personal_get"
      end
      # resource path
      local_var_path = '/public/{version}/customers/{customer_id}/insights/current_personal'.sub('{' + 'customer_id' + '}', customer_id.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Insights')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#public_version_customers_customer_id_insights_current_personal_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
