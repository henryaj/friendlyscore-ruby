=begin
#FriendlyScore Public API

#Public API for communication with FriendlyScore

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'spec_helper'
require 'json'

# Unit tests for FriendlyscoreClient::BankingDataApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BankingDataApi' do
  before do
    # run before each test
    @instance = FriendlyscoreClient::BankingDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BankingDataApi' do
    it 'should create an instance of BankingDataApi' do
      expect(@instance).to be_instance_of(FriendlyscoreClient::BankingDataApi)
    end
  end

  # unit tests for public_version_account_types_account_type_transaction_categories_get
  # Get the available transaction categories
  # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [Array<CategoryMetadata>]
  describe 'public_version_account_types_account_type_transaction_categories_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_banks_get
  # Get available banks.
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [BankCollection]
  describe 'public_version_banks_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_accounts_get
  # Get bank account list for a given customer.
  # @param customer_id Customer ID
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [AccountCollection]
  describe 'public_version_customers_customer_id_accounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_balances_get
  # Get bank balance list for a given customer.
  # @param customer_id Customer ID
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [BalanceCollection]
  describe 'public_version_customers_customer_id_balances_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get
  # Get the current user consent for given bank
  # @param customer_id Customer ID
  # @param consent_type Identifier of the consent type. Currently only &#x60;&#39;account&#39;&#x60; is used.
  # @param bank_slug Identifier of the bank. Bank slug
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [ConsentData]
  describe 'public_version_customers_customer_id_bank_bank_slug_consent_consent_type_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_banks_get
  # Get customer&#39;s connected banks with embedded consent objects.
  # @param customer_id Customer ID
  # @param version 
  # @param [Hash] opts the optional parameters
  # @return [BankWithConsentsCollection]
  describe 'public_version_customers_customer_id_banks_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_transaction_categorisation_account_type_patch
  # Update given set of transactions with a new category.
  # @param customer_id Customer ID
  # @param account_type Account type: &#x60;Personal&#x60; or &#x60;Business&#x60;
  # @param version 
  # @param [Hash] opts the optional parameters
  # @option opts [TransactionsCategoryPatch] :category_patch Object describing which transactions should be patched and what category should be set.
  # @return [nil]
  describe 'public_version_customers_customer_id_transaction_categorisation_account_type_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for public_version_customers_customer_id_transactions_get
  # Get bank transaction list for a given customer.
  # @param customer_id Customer ID
  # @param version 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number (1 by default)
  # @option opts [Integer] :max_per_page Item count on one page (1000 by default)
  # @option opts [String] :category_id Category ID to filter by
  # @option opts [String] :account_number Account number to filter by
  # @option opts [String] :account_type OpenBanking Account type (&#x60;&#39;Personal&#39;&#x60; or &#x60;&#39;Business&#39;&#x60;)
  # @option opts [String] :bank_slug Bank slug to filter by
  # @option opts [Integer] :booking_date_time_from Min value (inclusive) for booking date time filter (UNIX timestamp in seconds)
  # @option opts [Integer] :booking_date_time_to Max value (inclusive) for booking date time filter (UNIX timestamp in seconds)
  # @option opts [String] :currency Currency to filter by (ISO 4217 format)
  # @return [TransactionCollection]
  describe 'public_version_customers_customer_id_transactions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
